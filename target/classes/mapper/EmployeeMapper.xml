<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="myoa.mapper.EmployeeMapper">
	<!-- 添加新员工 -->
	<insert id="add" parameterType="Employee" keyProperty="id" useGeneratedKeys="true">
		INSERT INTO Employee(Nr,PASSWORD,NAME,Gender,Email,entryDate,DepartmentId,IsManager,STATUS) VALUES(#{nr},#{password},#{name},#{gender},#{email},#{entryDate},#{department.id},#{isManager},#{status})
	</insert>
	<!-- 删除员工 -->
	<delete id="delete" parameterType="int">
		DELETE FROM Employee WHERE id = #{id}
	</delete>
	<!-- 修改员工信息 -->
	<update id="update" parameterType="Employee">
		UPDATE Employee
		<set>
			<if test="nr != null">nr = #{nr},</if>
			<if test="password != null">password = #{password},</if>
			<if test="name != null">name = #{name},</if>
			<if test="email != null">email = #{email},</if>
			<if test="gender != null">gender = #{gender},</if>
			<if test="department != null">DepartmentId = #{department.id},</if>
			<if test="isManager != null">IsManager = #{isManager},</if>
			<if test="status != null">status = #{status},</if>
			<if test="entryDate != null">entryDate = #{entryDate},</if>
		</set>
		<where>
			id = #{id}
		</where>
	</update>
	
	<sql id="sql">
		SELECT e.*,
		 d.name AS 'department_name',
		 d.description AS 'department_description',
		 d.status AS 'department_status',
		 r.id AS role_id,
		 r.`Name` AS role_name
		 FROM Employee AS e
			LEFT JOIN Department AS d ON(e.DepartmentId = d.id)
			LEFT JOIN Role AS r ON(r.`Id` IN (SELECT RoleId FROM EmployeeRole WHERE employeeId = e.`Id`))
	</sql>
	<resultMap type="Employee" id="EmployeeResultMap">
		<id column="id" property="id"/>
		<result column="nr" property="nr"/>
		<result column="password" property="password"/>
		<result column="name" property="name"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<result column="isManager" property="isManager"/>
		<result column="status" property="status"/>
		<result column="entryDate" property="entryDate"/>
		
		<!-- 填充部门 -->
		<association property="department" javaType="Department">
			<id column="departmentId" property="id"/>
			<result column="department_name" property="name"/>
			<result column="department_description" property="description"/>
			<result column="department_status" property="status"/>
			<result column="department_fixedPhone" property="fixedPhone" />
			<result column="department_movePhone" property="movePhone" />
			<result column="department_fax" property="fax" />
		</association>
		
		<!-- <association property="department" column="departmentId" 
			javaType="Department" select="oa.dao.DepartmentDao.fetchDepartmentById" /> -->
		<!-- 填充角色 -->
		<collection property="roles" ofType="Role">
			<id column="role_id" property="id"/>
			<result column="role_name" property="name"/>
		</collection>
		
	</resultMap>
	
	<!-- 根据员工 Id查找员工 -->
	<select id="fetchEmployeeById" resultMap="EmployeeResultMap" parameterType="int">
		<include refid="sql" /> WHERE e.id = #{id}
	</select>
	<!-- 根据员工 编号查找员工 -->
	<select id="fetchEmployeeByNr" resultMap="EmployeeResultMap" parameterType="string">
		<include refid="sql" /> WHERE nr = #{nr}
	</select>
	<!-- 获取所有员工信息 -->
	<select id="fetchAllEmployee" resultMap="EmployeeResultMap">
		<include refid="sql" />
	</select>
	
	
	<select id="getEmployeesPagings" resultMap="EmployeeResultMap">
		<include refid="sql" />
		<where>
		    <if test="dids>0">
		    	  and d.id=#{dids}		    
		    </if>	
		     <if test="name!=null and name!=''">
				and e.Name like CONCAT('%',#{name},'%') 
			</if>
			<if test="nr!=null and nr!=''">
				and e.Nr like CONCAT('%',#{nr},'%')
			</if>
		</where>		
		limit #{pageNum},#{pageSize} 
	</select>
	
	<select id="fetchEmployeesRows" resultType="int">
		SELECT  COUNT(1)
		 FROM Employee AS e
			LEFT JOIN Department AS d ON(e.DepartmentId = d.id)
			LEFT JOIN Role AS r ON(r.`Id` IN (SELECT RoleId FROM EmployeeRole WHERE employeeId = e.`Id`))
		<where>
		    <if test="dids>0">
		    	  and d.id=#{dids}		    
		    </if>		
		     <if test="name!=null and name!=''">
				and e.Name like CONCAT('%',#{name},'%')
			</if>
		</where>
	</select> 
	
	
	
	
	<select id="checkLogin" parameterType="hashmap" resultType="Employee">
		SELECT * FROM Employee
			WHERE  Nr=#{nr} AND PASSWORD=#{password}
	</select>
	
	<select id="getFunctionById" parameterType="int" resultType="Function">
		SELECT DISTINCT f.* FROM Employee e
			INNER JOIN EmployeeRole er ON er.`EmployeeId` = e.`Id`
			INNER JOIN Role r ON r.`Id` = er.`RoleId`
			INNER JOIN RoleFunction rf ON rf.`RoleId` = r.`Id`
			INNER JOIN `FUNCTION` f ON f.`Id` = rf.`FunctionId`
		WHERE e.`Id` = #{employeeId}
	</select>

</mapper>












